using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;

namespace database
{
    class Program
    {
        static void Main(string[] args)
        {
            Database database = new Database();
            database.Work();
        }
    }

    class Database
    {
        private List<Player> _players = new List<Player>();

        private void ShowData()
        {
            for (int i = 0; i < _players.Count; i++)
            {
                Console.Write($"{i + 1}-й игрок: ");
                _players[i].ShowPlayer();
                Console.WriteLine();
            }
        }

        private void AddPlayer()
        {
            int userInputNumber = SetIdentityNumber(_players);

            Console.WriteLine("Введите никнейм игрока: ");
            string userInputNickname = Console.ReadLine();

            Console.WriteLine("Введите уровень игрока: ");
            int userInputLevel = GetNumber();
            Player player = new Player(userInputNickname, userInputNumber, userInputLevel, false);

            _players.Add(player);
            Console.WriteLine("Игрок добавлен");
        }

        private int SetIdentityNumber(List<Player> players)
        {
            int userInputNumber = default;
            bool isWorking = true;
            Console.WriteLine("Введите идентификационный номер игрока: ");
            while (isWorking)
            {
                userInputNumber = GetNumber();
                if (_players.Count == 0)
                {
                    isWorking = false;
                }
                else
                {
                    if (players.Exists(player => player.IdentityNumber == userInputNumber))
                    {
                        Console.WriteLine("пользователь с таким номером уже есть, попробуйте еще раз");
                    }
                    else
                    {
                        isWorking = false;
                    }
                }
            }
            return userInputNumber;
        }

        private void RemovePlayer()
        {
            if (_players.Count <= 0)
            {
                Console.WriteLine("База данных пустая, попробуйте кого-то добавить");
            }
            else
            {
                _players.RemoveAt(FindPlayerByNumber());
                Console.WriteLine("Игрок удален, введите следующую команду");
            }
        }

        private int FindPlayerByNumber()
        {
            int playerNumber = default;
            bool isWorking = true;
            while (isWorking)
            {
                ShowData();
                Console.WriteLine("Введите порядковый номер игрока");
                playerNumber = GetNumber() - 1;
                if (playerNumber < _players.Count && playerNumber > -1)
                {
                    isWorking = false;
                }
                else
                {
                    Console.WriteLine("Вам нужно ввести номер уже существующего игрока");
                }
            }
            return playerNumber;
        }

        private int GetNumber()
        {
            int userInput = default;
            bool isWorking = true;
            while (isWorking)
            {
                if (int.TryParse(Console.ReadLine(), out userInput))
                {
                    isWorking = false;
                }
                else
                {
                    Console.WriteLine("Введите число");
                }
            }
            return userInput;
        }

        private void SetPlayerStatus()
        {
            if (_players.Count <= 0)
            {
                Console.WriteLine("База данных пустая, попробуйте кого-то добавить");
            }
            else
            {
                Console.WriteLine("1 - ЗАБАНИТЬ 2 - РАЗБАНИТЬ");
                string userInput = Console.ReadLine();
                int playerIndex = FindPlayerByNumber();
                switch (userInput)
                {
                    case "1":
                        BanPlayer(playerIndex);
                        break;
                    case "2":
                        UnbanPlayer(playerIndex);
                        break;
                    default:
                        Console.WriteLine("такой функции нету");
                        break;
                }
            }
        }

        private void BanPlayer(int index) 
        {
            _players[index].Ban();
            Console.WriteLine($"игрок под номером {index+1} забанен");
        }

        private void UnbanPlayer(int index) 
        {
            _players[index].Unban();
            Console.WriteLine($"игрок под номером {index+1} разбанен");
        }

        public void Work()
        {
            Console.WriteLine("Выберите, что хотите сделать: 1 - добавить игрока 2 -  удалить игрока  3 - забанить/разбанить игрока по порядковому номеру 4 - показать всех игроков 5 - выйти из программы23");
            string userInput = default;
            while (userInput != "5")
            {
                userInput = Console.ReadLine();
                switch (userInput)
                {
                    case "1":
                        AddPlayer();
                        Console.WriteLine("Выберите следующую команду");
                        break;
                    case "2":
                        RemovePlayer();
                        Console.WriteLine("Выберите следующую команду");
                        break;
                    case "3":
                        SetPlayerStatus();
                        Console.WriteLine("Выберите следующую команду");
                        break;
                    case "4":
                        ShowData();
                        Console.WriteLine("Выберите следующую команду");
                        break;
                    case "5":
                        Console.WriteLine("Вы покинули программу");
                        break;
                    default:
                        Console.WriteLine("Такого делать мы не умеем");
                        break;
                }
            }
        }
    }

    class Player
    {
        private string _nickname;
        private int _level;
        private bool _ban;

        public int IdentityNumber { get; }

        public Player(string nickname, int serialNumber, int level, bool ban)
        {
            _nickname = nickname;
            IdentityNumber = serialNumber;
            _level = level;
            _ban = ban;
        }

        public void ShowPlayer()
        {
            Console.Write($"Номер игрока - {IdentityNumber}\t Ник - {_nickname}\t Уровень - {_level}\t Забанен - {_ban}" );
        }

        public void Ban() 
        { 
            _ban = true; 
        }

        public void Unban() 
        { 
            _ban = false;
        }
    }
}
