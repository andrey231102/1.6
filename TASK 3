using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using System.Linq;
namespace database
{
//Реализовать базу данных игроков и методы для работы с ней.
//У игрока может быть порядковый номер, ник, уровень, флаг – забанен ли он(флаг - bool).
//Реализовать возможность добавления игрока, бана игрока по порядковому номеру, разбана игрока по порядковому номеру и удаление игрока.
//Создание самой БД не требуется, задание выполняется инструментами, которые вы уже изучили в рамках курса.
    class Program
    {
        static void Main(string[] args)
        {
            Database database = new Database();
            database.Work();
        }
    }

    class Database
    {
        private List<Player> _players = new List<Player>();
        public void ShowData()
        {
            for (int i = 0; i < _players.Count; i++)
            {
                Console.Write($"{i + 1}-й игрок: ");
                _players[i].ShowPlayer();
                Console.WriteLine();
            }
        }

        public void Work()
        {
            Console.WriteLine("Выберите, что хотите сделать: 1 - добавить игрока 2 -  удалить игрока  3 - забанить/разбанить игрока по порядковому номеру4 - покинуть программу");
            string userInput = default;
            while (userInput != "4")
            {
                userInput = Console.ReadLine();
                switch (userInput)
                {
                    case "1":
                        AddPlayer();
                        Console.WriteLine("Выберите следующую команду");
                        break;
                    case "2":
                        RemovePlayer();
                        Console.WriteLine("Выберите следующую команду");
                        break;
                    case "3":
                        //SetPlayerStatus();
                        Console.WriteLine("Выберите следующую команду");
                        break;
                    case "4":
                        Console.WriteLine("Вы покинули программу");
                        break;
                    default:
                        Console.WriteLine("Такого делать мы не умеем");
                        break;
                }
            }
        }

        public void AddPlayer()
        {
            int userInputNumber = SetIdentityNumber(_players);

            Console.WriteLine("Введите никнейм игрока: ");
            string userInputNickname = Console.ReadLine();

            Console.WriteLine("Введите уровень игрока: ");
            int userInputLevel = GetNumber();
            Player player = new Player(userInputNickname, userInputNumber, userInputLevel);

            _players.Add(player);
            Console.WriteLine("Игрок добавлен");
        }

        private int SetIdentityNumber(List<Player> players)
        {
            int userInputNumber = default;
            bool isWorking = true;
            Console.WriteLine("Введите идентификационный номер игрока: ");
            while (isWorking)
            {
                userInputNumber = GetNumber();
                if (_players.Count == 0)
                {
                    isWorking = false;
                }
                else
                {
                    if (players.Any(player => player.IdentityNumber == userInputNumber))
                    {
                        Console.WriteLine("пользователь с таким номером уже есть");
                    }
                    else
                    {
                        isWorking = false;
                    }
                }  
            }
            return userInputNumber;
        }

        private void RemovePlayer()
        {
            if (_players.Count <= 0)
            {
                Console.WriteLine("База данных пустая, попробуйте кого-то добавить");
            }
            else
            {
                _players.RemoveAt(FindPlayerByNumber());
                Console.WriteLine("Игрок удален, введите следующую команду");
            }
        }

        private int FindPlayerByNumber()
        {
            int playerNumber = default;
            bool isWorking = true;
            while (isWorking)
            {
                ShowData();
                Console.WriteLine("Введите порядковый номер игрока, которого хотите удалить");
                playerNumber = GetNumber() - 1;
                if (playerNumber < _players.Count && playerNumber > -1)
                {
                    isWorking = false;
                }
                else
                {
                    Console.WriteLine("Вам нужно ввести номер уже существующего игрока");
                }
            }
            return playerNumber;
        }

        private int GetNumber()
        {
            int userInput = default;
            bool isWorking = true;
            while (isWorking)
            {
                if (int.TryParse(Console.ReadLine(), out userInput))
                {
                    isWorking = false;
                }
                else
                {
                    Console.WriteLine("Введите число");
                }
            }
            return userInput;
        }
    }

    class Player
    {
        private string _nickname;
        private int _level;
        
        public int IdentityNumber { get; }

        public Player(string nickname, int serialNumber, int level)
        {
            _nickname = nickname;
            IdentityNumber = serialNumber;
            _level = level;
        }

        public void ShowPlayer()
        {
            Console.Write($"Номер игрока - {IdentityNumber}\t Ник - {_nickname}\t Уровень - {_level} ");
        }
    }
}
